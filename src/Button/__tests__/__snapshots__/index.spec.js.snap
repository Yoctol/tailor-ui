// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button should render correctly 1`] = `
.c1 {
  position: absolute;
  border-radius: 50%;
  opacity: 1;
  background: rgba(0,0,0,0.2);
  -webkit-transform: scale(0);
  -ms-transform: scale(0);
  transform: scale(0);
}

.c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  overflow: hidden;
  border: 0.0625rem solid;
  border-radius: 0.25rem;
  line-height: 1.5rem;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
  white-space: nowrap;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-transition: all .2s ease;
  transition: all .2s ease;
  padding: 0.3125rem 0.5rem;
  font-size: 1rem;
  border-color: #c3c3c3;
  background: #ffffff;
  color: #111111;
}

.c0:focus {
  outline: 0;
}

.c0:disabled,
.c0[disabled] {
  opacity: 0.5;
  cursor: default;
  pointer-events: none;
}

.c0:hover {
  border-color: #423b63;
  background: #e9e9e9;
}

<Button
  block={false}
  loading={false}
  outlined={false}
  rounded={false}
  size="md"
  text={false}
  type="default"
>
  <Button__StyledButton
    block={false}
    innerRef={
      Object {
        "current": <button
          class="c0"
          type="default"
        >
          Text Button
          <div
            class="c1"
          />
        </button>,
      }
    }
    loading={false}
    onMouseUp={[Function]}
    onTouchend={[Function]}
    outlined={false}
    rounded={false}
    size="md"
    text={false}
    type="default"
  >
    <button
      className="c0"
      onMouseUp={[Function]}
      size="md"
      type="default"
    >
      Text Button
      <Ripple>
        <Ripple__StyledRipple
          rippling={false}
          style={Object {}}
        >
          <div
            className="c1"
            style={Object {}}
          />
        </Ripple__StyledRipple>
      </Ripple>
    </button>
  </Button__StyledButton>
</Button>
`;

exports[`Button should render with props variant and type 1`] = `
.c1 {
  position: absolute;
  border-radius: 50%;
  opacity: 1;
  background: rgba(0,0,0,0.2);
  -webkit-transform: scale(0);
  -ms-transform: scale(0);
  transform: scale(0);
}

.c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: relative;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  overflow: hidden;
  border: 0.0625rem solid;
  border-radius: 0.25rem;
  line-height: 1.5rem;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
  white-space: nowrap;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-transition: all .2s ease;
  transition: all .2s ease;
  padding: 0.3125rem 0.5rem;
  font-size: 1rem;
  border-color: #4384f0;
  background: #4384f0;
  color: #fff;
}

.c0:focus {
  outline: 0;
}

.c0:disabled,
.c0[disabled] {
  opacity: 0.5;
  cursor: default;
  pointer-events: none;
}

.c0:hover {
  background: #fff;
  color: #4384f0;
}

<Button
  block={false}
  loading={false}
  outlined={false}
  rounded={false}
  size="md"
  text={false}
  type="info"
  variant="rounded"
>
  <Button__StyledButton
    block={false}
    innerRef={
      Object {
        "current": <button
          class="c0"
          type="info"
        >
          Text Button
          <div
            class="c1"
          />
        </button>,
      }
    }
    loading={false}
    onMouseUp={[Function]}
    onTouchend={[Function]}
    outlined={false}
    rounded={false}
    size="md"
    text={false}
    type="info"
    variant="rounded"
  >
    <button
      className="c0"
      onMouseUp={[Function]}
      size="md"
      type="info"
    >
      Text Button
      <Ripple>
        <Ripple__StyledRipple
          rippling={false}
          style={Object {}}
        >
          <div
            className="c1"
            style={Object {}}
          />
        </Ripple__StyledRipple>
      </Ripple>
    </button>
  </Button__StyledButton>
</Button>
`;
